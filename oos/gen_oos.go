// Code generated by osa/gen. DO NOT EDIT.
package oos

import (
	"io"
	"os"
)

type oos struct{}

// Lstat returns a FileInfo describing the named file.
func (oos) Stat(name string) (FileInfo, error) {
	return os.Stat(name)
}

// IsExist returns a boolean indicating whether the error is known to report
// that a file or directory already exists.
func (oos) IsExist(err error) bool {
	return os.IsExist(err)
}

// IsNotExist returns a boolean indicating whether the error is known to
// report that a file or directory does not exist.
func (oos) IsNotExist(err error) bool {
	return os.IsNotExist(err)
}

// PathSeparator returns the directory separator character.
func (oos) PathSeparator() uint8 {
	return PathSeparator()
}

// IsPathSeparator reports whether c is a directory separator character.
func (oos) IsPathSeparator(c uint8) bool {
	return os.IsPathSeparator(c)
}

// Mkdir creates a new directory.
func (oos) Mkdir(name string, perm FileMode) error {
	return os.Mkdir(name, perm)
}

// MkdirAll creates a directory named path, along with any necessary parents.
func (oos) MkdirAll(name string, perm FileMode) error {
	return os.MkdirAll(name, perm)
}

// MkdirTemp creates a new temporary directory in the directory dir and
// returns the pathname of the new directory.
func (oos) MkdirTemp(dir, pattern string) (string, error) {
	return os.MkdirTemp(dir, pattern)
}

// ReadDir reads the named directory and returns all its directory entries
// sorted by filename.
func (oos) ReadDir(name string) ([]DirEntry, error) {
	return os.ReadDir(name)
}

// WriteFile writes data to the named file, creating it if necessary.
func (oos) WriteFile(name string, data []byte, perm FileMode) error {
	return os.WriteFile(name, data, perm)
}

// ReadFile reads the named file and returns the contents.
func (oos) ReadFile(name string) ([]byte, error) {
	return os.ReadFile(name)
}

// Rename renames (moves) oldpath to newpath.
func (oos) Rename(oldpath, newpath string) error {
	return os.Rename(oldpath, newpath)
}

// Remove removes the named file or empty directory.
func (oos) Remove(name string) error {
	return os.Remove(name)
}

// RemoveAll removes path and any children it contains
func (oos) RemoveAll(path string) error {
	return os.RemoveAll(path)
}

// Getwd returns a rooted path name corresponding to the current directory.
func (oos) Getwd() (dir string, err error) {
	return os.Getwd()
}

// UserCacheDir returns the default directory to use for cached data.
func (oos) UserCacheDir() (string, error) {
	return os.UserCacheDir()
}

// UserConfigDir returns the default directory to use for configuration data.
func (oos) UserConfigDir() (string, error) {
	return os.UserConfigDir()
}

// UserHomeDir returns the current user's home directory.
func (oos) UserHomeDir() (string, error) {
	return os.UserHomeDir()
}

// Exit causes the current program to exit with the given status code.
func (oos) Exit(code int) {
	os.Exit(code)
}

// Stdin returns IO reader for Stdin.
func (oos) Stdin() io.Reader {
	return os.Stdin
}

// Stdout returns IO writer for Stdout.
func (oos) Stdout() io.Writer {
	return os.Stdout
}

// Stderr returns IO writer for Stderr.
func (oos) Stderr() io.Writer {
	return os.Stderr
}
